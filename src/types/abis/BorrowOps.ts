/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BorrowOpsInterface extends utils.Interface {
  functions: {
    "BORROWING_FEE_FLOOR()": FunctionFragment;
    "CCR()": FunctionFragment;
    "DECIMAL_PRECISION()": FunctionFragment;
    "LIQUIDATION_PENALTY()": FunctionFragment;
    "MCR()": FunctionFragment;
    "MIN_NET_DEBT()": FunctionFragment;
    "REDEMPTION_FEE_FLOOR()": FunctionFragment;
    "accountManager()": FunctionFragment;
    "addColl(uint256,address,address)": FunctionFragment;
    "adjustAccount(uint256,uint256,uint256,uint256,bool,address,address)": FunctionFragment;
    "claimCollateral()": FunctionFragment;
    "closeAccount()": FunctionFragment;
    "collSurplusPool()": FunctionFragment;
    "factory()": FunctionFragment;
    "getCollPrice()": FunctionFragment;
    "getEntireSystemColl()": FunctionFragment;
    "getEntireSystemDebt()": FunctionFragment;
    "mainPool()": FunctionFragment;
    "openAccount(uint256,uint256,uint256,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayUND(uint256,address,address)": FunctionFragment;
    "safuFund()": FunctionFragment;
    "setAddresses(address)": FunctionFragment;
    "sortedAccounts()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unboundFeesFactory()": FunctionFragment;
    "undToken()": FunctionFragment;
    "withdrawColl(uint256,address,address)": FunctionFragment;
    "withdrawUND(uint256,uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BORROWING_FEE_FLOOR"
      | "CCR"
      | "DECIMAL_PRECISION"
      | "LIQUIDATION_PENALTY"
      | "MCR"
      | "MIN_NET_DEBT"
      | "REDEMPTION_FEE_FLOOR"
      | "accountManager"
      | "addColl"
      | "adjustAccount"
      | "claimCollateral"
      | "closeAccount"
      | "collSurplusPool"
      | "factory"
      | "getCollPrice"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
      | "mainPool"
      | "openAccount"
      | "owner"
      | "pair"
      | "renounceOwnership"
      | "repayUND"
      | "safuFund"
      | "setAddresses"
      | "sortedAccounts"
      | "transferOwnership"
      | "unboundFeesFactory"
      | "undToken"
      | "withdrawColl"
      | "withdrawUND"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_NET_DEBT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addColl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collSurplusPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mainPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayUND",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "safuFund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sortedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unboundFeesFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "undToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawColl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUND",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_NET_DEBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addColl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collSurplusPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayUND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safuFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unboundFeesFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUND",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address,uint256)": EventFragment;
    "AccountUpdated(address,uint256,uint256,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UNDBorrowingFeePaid(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UNDBorrowingFeePaid"): EventFragment;
}

export interface AccountCreatedEventObject {
  _borrower: string;
  arrayIndex: BigNumber;
}
export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  AccountCreatedEventObject
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface AccountUpdatedEventObject {
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  operation: number;
}
export type AccountUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  AccountUpdatedEventObject
>;

export type AccountUpdatedEventFilter = TypedEventFilter<AccountUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UNDBorrowingFeePaidEventObject {
  _borrower: string;
  _UNDFee: BigNumber;
}
export type UNDBorrowingFeePaidEvent = TypedEvent<
  [string, BigNumber],
  UNDBorrowingFeePaidEventObject
>;

export type UNDBorrowingFeePaidEventFilter =
  TypedEventFilter<UNDBorrowingFeePaidEvent>;

export interface BorrowOps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowOpsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    CCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDEMPTION_FEE_FLOOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountManager(overrides?: CallOverrides): Promise<[string]>;

    addColl(
      _collDeposit: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adjustAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collDeposit: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _UNDChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getCollPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    mainPool(overrides?: CallOverrides): Promise<[string]>;

    openAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collAmount: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayUND(
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safuFund(overrides?: CallOverrides): Promise<[string]>;

    setAddresses(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sortedAccounts(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unboundFeesFactory(overrides?: CallOverrides): Promise<[string]>;

    undToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawColl(
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUND(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

  CCR(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

  MCR(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

  REDEMPTION_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

  accountManager(overrides?: CallOverrides): Promise<string>;

  addColl(
    _collDeposit: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adjustAccount(
    _maxFeePercentage: PromiseOrValue<BigNumberish>,
    _collDeposit: PromiseOrValue<BigNumberish>,
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _UNDChange: PromiseOrValue<BigNumberish>,
    _isDebtIncrease: PromiseOrValue<boolean>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collSurplusPool(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  getCollPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

  mainPool(overrides?: CallOverrides): Promise<string>;

  openAccount(
    _maxFeePercentage: PromiseOrValue<BigNumberish>,
    _collAmount: PromiseOrValue<BigNumberish>,
    _UNDAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayUND(
    _UNDAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safuFund(overrides?: CallOverrides): Promise<string>;

  setAddresses(
    _accountManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sortedAccounts(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unboundFeesFactory(overrides?: CallOverrides): Promise<string>;

  undToken(overrides?: CallOverrides): Promise<string>;

  withdrawColl(
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUND(
    _maxFeePercentage: PromiseOrValue<BigNumberish>,
    _UNDAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    CCR(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    accountManager(overrides?: CallOverrides): Promise<string>;

    addColl(
      _collDeposit: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collDeposit: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _UNDChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollateral(overrides?: CallOverrides): Promise<void>;

    closeAccount(overrides?: CallOverrides): Promise<void>;

    collSurplusPool(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    getCollPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    mainPool(overrides?: CallOverrides): Promise<string>;

    openAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collAmount: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayUND(
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safuFund(overrides?: CallOverrides): Promise<string>;

    setAddresses(
      _accountManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sortedAccounts(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unboundFeesFactory(overrides?: CallOverrides): Promise<string>;

    undToken(overrides?: CallOverrides): Promise<string>;

    withdrawColl(
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUND(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountCreated(address,uint256)"(
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null
    ): AccountCreatedEventFilter;

    "AccountUpdated(address,uint256,uint256,uint8)"(
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      operation?: null
    ): AccountUpdatedEventFilter;
    AccountUpdated(
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      operation?: null
    ): AccountUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UNDBorrowingFeePaid(address,uint256)"(
      _borrower?: PromiseOrValue<string> | null,
      _UNDFee?: null
    ): UNDBorrowingFeePaidEventFilter;
    UNDBorrowingFeePaid(
      _borrower?: PromiseOrValue<string> | null,
      _UNDFee?: null
    ): UNDBorrowingFeePaidEventFilter;
  };

  estimateGas: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    CCR(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    accountManager(overrides?: CallOverrides): Promise<BigNumber>;

    addColl(
      _collDeposit: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adjustAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collDeposit: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _UNDChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collSurplusPool(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getCollPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    mainPool(overrides?: CallOverrides): Promise<BigNumber>;

    openAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collAmount: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayUND(
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safuFund(overrides?: CallOverrides): Promise<BigNumber>;

    setAddresses(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sortedAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unboundFeesFactory(overrides?: CallOverrides): Promise<BigNumber>;

    undToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawColl(
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUND(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROWING_FEE_FLOOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_PENALTY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REDEMPTION_FEE_FLOOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addColl(
      _collDeposit: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adjustAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collDeposit: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _UNDChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemColl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openAccount(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collAmount: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayUND(
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safuFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddresses(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sortedAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unboundFeesFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    undToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawColl(
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUND(
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _UNDAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
